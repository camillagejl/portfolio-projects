{"version":3,"sources":["elements/sort_arrow.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","List","useState","loading","setLoading","deletingId","setDeletingId","users","setUsers","get","fetch","method","headers","then","e","json","data","useEffect","arrowStyle","sortBy","setSortBy","sortDirection","setDirection","sortByColumn","column","sortedCollection","orderBy","transform","countryFilter","setCountryFilter","emailSubFilter","setEmailSubFilter","filteredCollection","filter","onChange","event","console","log","target","value","name","onClick","style","src","sortArrow","alt","map","user","key","_id","username","email","firstname","lastname","dateofbirth","slice","country","subscription","id","res","MobilePopup","showingPopup","setShowingPopup","App","direction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c763781.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sort_arrow.4be69749.svg\";","import React, {useState,useEffect} from \"react\";\r\nimport './App.css';\r\nimport {orderBy} from \"lodash\";\r\nimport {filter} from \"lodash\";\r\nimport sortArrow from \"./elements/sort_arrow.svg\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <header>\r\n                <h1>WORLD GAME USERS</h1>\r\n                <p>\r\n                    Welcome to the user list for World Game.\r\n                </p>\r\n                <p>\r\n                    On this page, you can view all users, filter and sort your view, and delete users.\r\n                </p>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction List() {\r\n    // LOADING CURSOR\r\n    const [loading, setLoading] = useState(true);\r\n    const [deletingId, setDeletingId] = useState(null);\r\n\r\n    // ----- GET USERS FROM DATABASE -----\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        get()\r\n    },[]);\r\n\r\n    // Sets useStates on click on one of the column headers.\r\n    function get() {\r\n        fetch(\"https://eexam-6f38.restdb.io/rest/website-users\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=uf-8\",\r\n                \"x-apikey\": \"5dde99ff4658275ac9dc1fce\",\r\n                \"cache-control\": \"no-cache\"\r\n            }\r\n        })\r\n            .then(e => e.json())\r\n            .then(data => {\r\n                setUsers(data);\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    // Function to remove users\r\n    const removeUser = (id) => {\r\n        setLoading(true);\r\n        setDeletingId(id);\r\n        fetch(\"https://eexam-6f38.restdb.io/rest/website-users/\" + id, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"x-apikey\": \"5dde99ff4658275ac9dc1fce\",\r\n                    \"cache-control\": \"no-cache\"\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(function() {\r\n                console.log(\"Deleted!\");\r\n                get();\r\n            })\r\n    };\r\n\r\n    // ----- SORT BY -----\r\n    // Defines useStates for sortBy (the key from the header that is clicked) and\r\n    // sortDirection (toggles between ascending and descending on click).\r\n    const [sortBy, setSortBy] = useState(\"userName\");\r\n    const [sortDirection, setDirection] = useState('asc');\r\n\r\n    const sortByColumn = (column) => {\r\n        setSortBy(column);\r\n        setDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    };\r\n\r\n    // orderBy (from 'lodash' library)\r\n    const sortedCollection = orderBy(\r\n        users,\r\n        [sortBy],\r\n        [sortDirection]\r\n    );\r\n\r\n    // The \"sort arrow\" next to the the clicked header rotates 180deg if the sortDirection\r\n    // is descending. If not, the arrow will not be styled.\r\n    let arrowStyle;\r\n    if (sortDirection === 'desc') {\r\n        arrowStyle = {transform: \"rotateX(180deg)\"}\r\n    }\r\n\r\n    // ----- FILTER BY -----\r\n\r\n    const [countryFilter, setCountryFilter] = useState('All');\r\n    const [emailSubFilter, setEmailSubFilter] = useState('All');\r\n\r\n    const filterByCountry = (event) => {\r\n        console.log(\"Changing Country\", event.target.value);\r\n        setCountryFilter(event.target.value);\r\n    };\r\n\r\n    const filterByEmailSub = (event) => {\r\n        console.log(\"Changing emailSub\", event.target.value);\r\n        setEmailSubFilter(event.target.value);\r\n    };\r\n\r\n    let filteredCollection = sortedCollection;\r\n    if (countryFilter !== 'All') {\r\n        filteredCollection = filter(\r\n            filteredCollection,\r\n            [\"country\", countryFilter]\r\n        );\r\n    }\r\n\r\n    if (emailSubFilter !== 'All') {\r\n        filteredCollection = filter(\r\n            filteredCollection,\r\n            [\"subscription\", emailSubFilter]\r\n        );\r\n    }\r\n\r\n    // ----- LIST COMPONENT -----\r\n\r\n    return (\r\n        <div className={`list ${loading ? \"loading\" : \"\"}`}>\r\n            <div className=\"dropdowns\">\r\n            <label>\r\n                Filter by country:\r\n                <select onChange={filterByCountry} name=\"filterByCountry\" className=\"filter_by filter_country\">\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Denmark\">Denmark</option>\r\n                    <option value=\"Germany\">Germany</option>\r\n                    <option value=\"Romania\">Romania</option>\r\n                    <option value=\"Sweden\">Sweden</option>\r\n                </select>\r\n            </label>\r\n\r\n            <label>\r\n                Filter by email subscription:\r\n                <select onChange={filterByEmailSub} name=\"filterByEmailPrefs\" className=\"filter_by filter_email\">\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Subscribed\">&#10003; Subscribed</option>\r\n                    <option value=\"Not Subscribed\">&times; Not subscribed</option>\r\n                </select>\r\n            </label>\r\n            </div>\r\n\r\n\r\n            <table>\r\n                <thead>\r\n\r\n                {/*Headers for the table - sorts on click*/}\r\n                <tr>\r\n\r\n                    {/* onClick runs SortByColumn-function with userName as parameter. */}\r\n                    <th onClick={() => sortByColumn(\"username\")}>\r\n                        Username\r\n\r\n                        {/* If sortBy is set to username, this function will return true and\r\n                        display the arrow.*/}\r\n                        {sortBy === \"username\" &&\r\n                        <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th onClick={() => sortByColumn(\"email\")}>\r\n                        Email\r\n                        {sortBy === \"email\" &&\r\n                        <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th onClick={() => sortByColumn(\"firstname\")}>\r\n                        First name\r\n                        {sortBy === \"firstname\" &&\r\n                            <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th onClick={() => sortByColumn(\"lastname\")}>\r\n                        Last name\r\n                        {sortBy === \"lastname\" &&\r\n                            <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th onClick={() => sortByColumn(\"dateofbirth\")}>\r\n                        Date of birth\r\n                        {sortBy === \"dateofbirth\" &&\r\n                        <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th onClick={() => sortByColumn(\"country\")}>\r\n                        Country\r\n                        {sortBy === \"country\" &&\r\n                        <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th onClick={() => sortByColumn(\"subscription\")}>\r\n                        Email subscription\r\n                        {sortBy === \"subscription\" &&\r\n                        <img className=\"sortArrow\" style={arrowStyle} src={sortArrow} alt=\"Sorting arrow\"/>\r\n                        }\r\n                    </th>\r\n\r\n                    <th className=\"delete_user_th\">\r\n                        Delete user\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n\r\n                {/* This should ideally be in a seperate file, but I could not make that work\r\n                 for now. */}\r\n                {filteredCollection.map(user => (\r\n\r\n                    <tr key={user._id} className={deletingId === user._id ? \"deleting\" : \"\"}>\r\n                        <td>{user.username}</td>\r\n                        <td>{user.email}</td>\r\n                        <td>{user.firstname}</td>\r\n                        <td>{user.lastname}</td>\r\n                        <td>{user.dateofbirth.slice(0,10)}</td>\r\n                        <td>{user.country}</td>\r\n                        <td>{user.subscription}</td>\r\n                        {deletingId === user._id ?\r\n                            <td className=\"delete_user\">&times; Deleting</td>\r\n                            :\r\n                            <td className=\"delete_user\" onClick={() => removeUser(user._id)}>&times; Delete</td>\r\n                        }\r\n                    </tr>\r\n\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MobilePopup() {\r\n\r\n    const [showingPopup, setShowingPopup] = useState(true);\r\n\r\n    console.log(showingPopup);\r\n\r\n    return (\r\n        <div className={`${showingPopup ? \"mobile_popup\" : \"hidden\"}`}>\r\n            <strong>Welcome to the World Games user list!</strong>\r\n            <p>This user list is created for desktop. Please use a desktop for the best experience.</p>\r\n            <p>If you wish continue on your current device, we recommend switching to landscape mode.</p>\r\n            <button onClick={() => setShowingPopup(false)}>Continue to the list</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={`App`}>\r\n            <Header/>\r\n            <List direction=\"asc\"/>\r\n            <MobilePopup/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n// SOURCES:\r\n//\r\n// SORTING\r\n// Inspiration for adding sorting to the list\r\n// https://jetrockets.pro/blog/creating-sortable-list-with-react-redux-and-reselect\r\n//\r\n// lodash library for easy sorting\r\n// https://www.npmjs.com/package/lodash\r\n//\r\n// Conditional rendering\r\n// https://reactjs.org/docs/conditional-rendering.html?fbclid=IwAR3Nu5SDXMZ4yrBxZ86vnCRLchjlDdDgm0m9Lg3yi89WtVsPgS3I3b763Rw#inline-if-with-logical--operator1\r\n//\r\n// Adding class to popup depending on useState\r\n// https://codesandbox.io/s/vv3qnlx347?fontsize=14","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}